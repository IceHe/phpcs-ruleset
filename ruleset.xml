<?xml version="1.0"?>
<ruleset name="IceHe">

    <description>Coding Standard - PHP</description>

    <exclude-pattern>*/tests/*</exclude-pattern>

    <!-- ================= -->
    <!-- Options for phpcs -->
    <!-- ================= -->


    <!-- Short options -->
    <!-- -e : Explain a standard by showing the sniffs it includes -->
    <!-- -p : Show progress of the run -->
    <!-- -s : Show sniff codes in all reports -->
    <!-- -n : Do not print warnings (shortcut for \-\-warning-severity=0) -->
    <!-- -w : Print both warnings and errors (this is the default) -->
    <!-- More: 'phpcs -h' print the help message -->
    <arg value="ps" />

    <!-- Use colors in output -->
    <arg name="colors" />

    <!-- Report types: -->
    <!--    full (default), xml, checkstyle, csv, json, junit, emacs,      -->
    <!--    source, summary, diff, svnblame, gitblame, hgblame, notifysend -->
    <!--<arg name="report" value="full" />-->



    <!-- ===================================================================================================== -->
    <!-- The ruleset below is based on PHP_CodeSniffer version 3.1.0 (stable) by Squiz (http://www.squiz.net). -->
    <!-- ===================================================================================================== -->



    <!-- ======= -->
    <!-- Generic -->
    <!-- ======= -->


    <!-- # Generic.Arrays -->

    <!-- ## Generic.Arrays.DisallowLongArraySyntax -->
    <!-- Bans the use of the PHP long array syntax -->
    <!--    * Found: Short array syntax must be used to define arrays -->
    <rule ref="Generic.Arrays.DisallowLongArraySyntax" />

    <!-- ## Generic.Arrays.DisallowShortArraySyntax -->
    <!-- Bans the use of the PHP short array syntax -->
    <!--    * Found: Short array syntax is not allowed -->


    <!-- # Generic.Classes -->

    <!-- ## Generic.Classes.DuplicateClassName -->
    <!-- Reports errors if the same class or interface name is used in multiple files -->
    <!--    * Found: Duplicate %s name "%s" found; first defined in %s on line %s -->
    <rule ref="Generic.Classes.DuplicateClassName" />

    <!-- ## Generic.Classes.OpeningBraceSameLine -->
    <!-- Checks that the opening brace of a class/interface/trait is on the same line as the class declaration -->
    <!--    * MissingBrace: Possible parse error: %s missing opening or closing brace -->
    <!--    * BraceOnNewLine: Opening brace should be on the same line as the declaration for %s -->
    <!--    * ContentAfterBrace: Opening brace must be the last content on the line -->
    <!--    * SpaceBeforeBrace: Expected 1 space before opening brace; found %s -->
    <!-- 注意：启用合乎项目要求的规则 PEAR.Classes.ClassDeclaration，而非本规则 -->


    <!-- # Generic.CodeAnalysis -->

    <!-- ## Generic.CodeAnalysis.AssignmentInCondition -->
    <!-- Detects variable assignments being made within conditions -->
    <!--    * Found: Variable assignment found within a condition. Did you mean to do a comparison ? -->
    <!-- 赋值语句不能出现在条件语句 'if ( … )' 中 -->
    <!--<rule ref="Generic.CodeAnalysis.AssignmentInCondition" />-->

    <!-- ## Generic.CodeAnalysis.EmptyStatement -->
    <!-- This sniff class detected empty statement -->
    <!--    * Detected{$name}: Empty %s statement detected -->
    <!-- 条件语句的代码块 'if () { … }'要有代码，注释不算 -->
    <!--<rule ref="Generic.CodeAnalysis.EmptyStatement" />-->

    <!-- ## Generic.CodeAnalysis.ForLoopShouldBeWhileLoop -->
    <!-- Detects for-loops that can be simplified to a while-loop -->
    <!--    * CanSimplify: This FOR loop can be simplified to a WHILE loop -->
    <rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop" />

    <!-- ## Generic.CodeAnalysis.ForLoopWithTestFunctionCall -->
    <!-- Detects for-loops that use a function call in the test expression -->
    <!--    * NotAllowed: Avoid function calls in a FOR loop test part -->
    <!-- 循环语句 'for (…；$i < count(…); …)' 不应该每次循环都计算一次边界，例如使用 count(),strlen() 等 -->
    <!--<rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall" />-->

    <!-- ## Generic.CodeAnalysis.JumbledIncrementer -->
    <!-- Detects incrementer jumbling in for loops -->
    <!--    * Found: Loop incrementor (%s) jumbling with inner loop -->
    <rule ref="Generic.CodeAnalysis.JumbledIncrementer" />

    <!-- ## Generic.CodeAnalysis.UnconditionalIfStatement -->
    <!-- Detects unconditional if- and elseif-statements -->
    <!--    * Found: Avoid IF statements that are always true or false -->
    <!-- 条件语句不能是 'if (true)' 或 'if (false)' -->
    <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement" />

    <!-- ## Generic.CodeAnalysis.UnnecessaryFinalModifier -->
    <!-- Detects unnecessary final modifiers inside of final classes -->
    <!--    * Found: Unnecessary FINAL modifier in FINAL class -->
    <!-- final class 的方法不要带多余的 final 声明 -->
    <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier" />

    <!-- ## Generic.CodeAnalysis.UnusedFunctionParameter -->
    <!-- Checks the for unused function parameters -->
    <!--    * Found: The method parameter %s is never used -->
    <!--<rule ref="Generic.CodeAnalysis.UnusedFunctionParameter" />-->

    <!-- ## Generic.CodeAnalysis.UselessOverridingMethod -->
    <!-- Detects unnecessary overridden methods that simply call their parent -->
    <!--    * Found: Possible useless method overriding detected -->
    <!-- overriding（重写父类方法）的子类方法不能只是简单地调用父类的方法 -->
    <rule ref="Generic.CodeAnalysis.UselessOverridingMethod" />


    <!-- # Generic.Commenting -->

    <!-- ## Generic.Commenting.DocComment -->
    <!-- Ensures doc blocks follow basic formatting -->
    <!--    * Empty: Doc comment is empty -->
    <!--    * ContentAfterOpen: The open comment tag must be the only content on the line -->
    <!--    * ContentBeforeClose: The close comment tag must be the only content on the line -->
    <!--    * SpacingAfter: Additional blank lines found at end of doc comment -->
    <!--    * MissingShort: Missing short description in doc comment -->
    <!--    * SpacingBeforeShort: Doc comment short description must be on the first line -->
    <!--    * ShortNotCapital: Doc comment short description must start with a capital letter -->
    <!--    * SpacingBetween: There must be exactly one blank line between descriptions in a doc comment -->
    <!--    * LongNotCapital: Doc comment long description must start with a capital letter -->
    <!--    * SpacingBeforeTags: There must be exactly one blank line before the tags in a doc comment -->
    <!--    * ParamGroup: Parameter tags must be grouped together in a doc comment -->
    <!--    * NonParamGroup: Tag cannot be grouped with parameter tags in a doc comment -->
    <!--    * SpacingAfterTagGroup: There must be a single blank line after a tag group -->
    <!--    * TagValueIndent: Tag value indented incorrectly; expected %s spaces but found %s -->
    <!--    * ParamNotFirst: Parameter tags must be defined first in a doc comment -->
    <!--    * TagsNotGrouped: Tags account/recommend interesttagsmust be grouped together in a doc comment -->
    <rule ref="Generic.Commenting.DocComment">
        <exclude name="Generic.Commenting.DocComment.MissingShort" />
        <exclude name="Generic.Commenting.DocComment.ShortNotCapital" />
        <exclude name="Generic.Commenting.DocComment.LongNotCapital" />
        <exclude name="Generic.Commenting.DocComment.NonParamGroup" />
        <exclude name="Generic.Commenting.DocComment.TagValueIndent" />
        <exclude name="Generic.Commenting.DocComment.ParamNotFirst" />
    </rule>

    <!-- ## Generic.Commenting.Fixme -->
    <!-- Warns about FIXME comments -->
    <!--    * CommentFound | TaskFound: Comment refers to a FIXME task ("%s") -->
    <rule ref="Generic.Commenting.Fixme" />

    <!-- ## Generic.Commenting.Todo -->
    <!-- Warns about TODO comments -->
    <!--    * CommentFound | TaskFound: Comment refers to a TODO task ("%s") -->


    <!-- # Generic.ControlStructures -->

    <!-- ## Generic.ControlStructures.InlineControlStructure -->
    <!-- Verifies that inline control statements are not present -->
    <!--    * NotAllowed: Inline control structures are not allowed -->
    <!--    * Discouraged: Inline control structures are discouraged -->
    <!-- 不使用内联控制语句（即使 if 条件语句的代码块只有一行代码，也不能省略 '{}' 的围闭） -->
    <rule ref="Generic.ControlStructures.InlineControlStructure" />


    <!-- # Generic.Debug -->
    <!--    Notice: Require the external tools and we has no code about 'css,es,js', so I skip it. -->

    <!-- ## Generic.Debug.ClosureLinter -->
    <!-- Runs gjslint on the file -->
    <!--    * ExternalToolError: gjslint says: (%s) %s -->
    <!--    * ExternalTool: gjslint says: (%s) %s -->

    <!-- ## Generic.Debug.CSSLint -->
    <!-- Runs csslint on the file -->
    <!--    * ExternalTool: csslint says: … -->

    <!-- ## Generic.Debug.ESLint -->
    <!-- Runs eslint on the file -->
    <!--    * ExternalTool: eslint says: … -->

    <!-- ## Generic.Debug.JSHint -->
    <!-- Runs jshint.js on the file -->
    <!--    * ExternalTool: jshint says: … -->


    <!-- # Generic.Files -->

    <!-- ## Generic.Files.ByteOrderMark -->
    <!-- A simple sniff for detecting BOMs that may corrupt application work -->
    <!--    * Found: File contains %s byte order mark, which may corrupt your application -->
    <rule ref="Generic.Files.ByteOrderMark" />

    <!-- ## Generic.Files.EndFileNewline -->
    <!-- Ensures the file ends with a newline character -->
    <!--    * NotFound: File must end with a newline character -->
    <!-- 注意：有更完善的标准 PSR2.Files.EndFileNewline ，此处不再重复设置 -->

    <!-- ## Generic.Files.EndFileNoNewline -->
    <!-- Ensures the file does not end with a newline character -->
    <!--    * Found: File must not end with a newline character -->

    <!-- ## Generic.Files.InlineHTML -->
    <!-- Ensures the whole file is PHP only, with no whitespace or inline HTML -->
    <!--    * Found: PHP files must only contain PHP code -->
    <rule ref="Generic.Files.InlineHTML" />

    <!-- ## Generic.Files.LineEndings -->
    <!-- Checks that end of line characters are correct -->
    <!--    * InvalidEOLChar: End of line character is invalid; expected "%s" but found "%s" -->
    <rule ref="Generic.Files.LineEndings">
        <properties>
            <!-- EOL: End of line           -->
            <!-- * CRLF "\r\n": Windows     -->
            <!-- * LF "\n": Unix & macOS    -->
            <!-- * CR "\r": Classic Mac     -->
            <property name="eolChar" value="\n"/>
        </properties>
    </rule>

    <!-- ## Generic.Files.LineLength -->
    <!-- Checks the length of all lines in a file -->
    <!--    * MaxExceeded: Line exceeds maximum limit of %s characters; contains %s characters -->
    <!--    * TooLong: Line exceeds %s characters; contains %s characters -->
    <rule ref="Generic.Files.LineLength">
        <!-- 注意：此处的行长度上限很大，是因为某些字符串常量实在太长，不得已而为之 -->
        <properties>
            <!-- The limit that the length of a line should not exceed -->
            <property name="lineLimit" value="400" />
            <!-- The limit that the length of a line must not exceed -->
            <property name="absoluteLineLimit" value="400" />
        </properties>
    </rule>

    <!-- ## Generic.Files.LowercasedFilename -->
    <!-- Checks that all file names are lowercased -->
    <!--    * NotFound: Filename "%s" doesn\'t match the expected filename "%s" -->

    <!-- ## Generic.Files.OneClassPerFile -->
    <!-- Checks that only one class is declared per file -->
    <!--    * MultipleFound: Only one class is allowed in a file -->
    <rule ref="Generic.Files.OneClassPerFile" />

    <!-- ## Generic.Files.OneInterfacePerFile -->
    <!-- Checks that only one interface is declared per file -->
    <!--    * MultipleFound: Only one interface is allowed in a file -->
    <rule ref="Generic.Files.OneInterfacePerFile" />

    <!-- ## Generic.Files.OneObjectStructurePerFile -->
    <!-- Checks that only one object structure is declared per file -->
    <!--    * MultipleFound: Only one object structure is allowed in a file -->
    <!-- 说明：object structure 包括 class, interface, trait 等 -->
    <rule ref="Generic.Files.OneObjectStructurePerFile" />

    <!-- ## Generic.Files.OneTraitPerFile -->
    <!-- Checks that only one trait is declared per file -->
    <!--    * MultipleFound: Only one trait is allowed in a file -->
    <rule ref="Generic.Files.OneTraitPerFile" />


    <!-- # Generic.Formatting -->

    <!-- ## Generic.Formatting.DisallowMultipleStatements -->
    <!-- Ensures each statement is on a line by itself -->
    <!--    * SameLine: Each PHP statement must be on a line by itself -->
    <rule ref="Generic.Formatting.DisallowMultipleStatements" />

    <!-- ## Generic.Formatting.MultipleStatementAlignment -->
    <!-- Checks alignment of assignments -->
    <!--    * Incorrect: Equals sign not aligned correctly; expected %s but found %s -->
    <!--    * NotSame: Equals sign not aligned with surrounding assignments; expected %s but found %s -->

    <!-- ## Generic.Formatting.NoSpaceAfterCast -->
    <!-- Ensures there is no space after cast tokens -->
    <!--    * SpaceFound: A cast statement must not be followed by a space -->
    <!-- 类型转换操作符后，不能有空格 -->
    <rule ref="Generic.Formatting.NoSpaceAfterCast" />

    <!-- ## Generic.Formatting.SpaceAfterCast -->
    <!-- Ensures there is a single space after cast tokens -->
    <!--    * NoSpace: A cast statement must be followed by a single space -->
    <!--    * TooMuchSpace: A cast statement must be followed by a single space -->
    <!-- 类型转换操作符后必须紧跟一个空格 -->

    <!-- ## Generic.Formatting.SpaceAfterNot -->
    <!-- Ensures there is a single space after a NOT operator -->
    <!--    * Incorrect: There must be a single space after a NOT operator; %s found -->
    <!-- '!' not 操作符后必须紧跟一个空格 -->


    <!-- # Generic.Functions -->

    <!-- ## Generic.Functions.CallTimePassByReference -->
    <!-- Ensures that variables are not passed by reference when calling a function -->
    <!--    * NotAllowed: Call-time pass-by-reference calls are prohibited -->
    <rule ref="Generic.Functions.CallTimePassByReference" />

    <!-- ## Generic.Functions.FunctionCallArgumentSpacing -->
    <!-- Checks that calls to methods and functions are spaced correctly -->
    <!--    * SpaceBeforeComma: Space found before comma in function call -->
    <!--    * NoSpaceAfterComma: No space found after comma in function call -->
    <!--    * TooMuchSpaceAfterComma: Expected 1 space after comma in function call; %s found -->
    <!--    * NoSpaceBeforeEquals: Expected 1 space before = sign of default value -->
    <!--    * NoSpaceAfterEquals: Expected 1 space after = sign of default value -->
    <rule ref="Generic.Functions.FunctionCallArgumentSpacing" />

    <!-- ## Generic.Functions.OpeningFunctionBraceBsdAllman -->
    <!-- Checks that the opening brace of a function is on the line after the function declaration -->
    <!--    * BraceOnSameLine: Opening brace should be on a new line -->
    <!--    * BraceSpacing: Opening brace should be on the line after the declaration; found %s blank line(s) -->
    <!--    * ContentAfterBrace: Opening brace must be the last content on the line -->
    <!--    * BraceIndent: Opening brace indented incorrectly; expected %s spaces, found %s -->
    <rule ref="Generic.Functions.OpeningFunctionBraceBsdAllman" />

    <!-- ## Generic.Functions.OpeningFunctionBraceKernighanRitchie -->
    <!-- Checks that the opening brace of a function is on the same line as the function declaration -->
    <!--    * BraceOnNewLine: Opening brace should be on the same line as the declaration -->
    <!--    * ContentAfterBrace: Opening brace must be the last content on the line -->



    <!-- # Generic.Metrics -->

    <!-- ## Generic.Metrics.CyclomaticComplexity -->
    <!-- Checks the cyclomatic complexity (McCabe) for functions -->
    <!--    * MaxExceeded: Function\'s cyclomatic complexity (%s) exceeds allowed maximum of %s -->
    <!--    * TooHigh: Function\'s cyclomatic complexity (%s) exceeds %s; consider refactoring the function -->

    <!-- ## Generic.Metrics.NestingLevel -->
    <!-- Checks the nesting level for methods -->
    <!--    * MaxExceeded: Function\'s nesting level (%s) exceeds allowed maximum of %s -->
    <!--    * TooHigh: Function\'s nesting level (%s) exceeds %s; consider refactoring the function -->


    <!-- # Generic.NamingConventions -->

    <!-- ## Generic.NamingConventions.CamelCapsFunctionName -->
    <!-- Ensures method and functions are named correctly -->
    <!--    * MethodDoubleUnderscore: Method name "%s" is invalid; only PHP magic methods should be prefixed with a double underscore -->
    <!--    * ScopeNotCamelCaps: %s method name "%s" is not in camel caps format -->
    <!--    * NotCamelCaps: Method name "%s" is not in camel caps format | Function name "%s" is not in camel caps format -->
    <!--    * FunctionDoubleUnderscore: Function name "%s" is invalid; only PHP magic methods should be prefixed with a double underscore -->
    <rule ref="Generic.NamingConventions.CamelCapsFunctionName.NotCamelCaps" />
    <!-- 注意：除了以上的一条规则，其它均启用更完善的规则 PEAR.NamingConventions.ValidFunctionName，而非本规则 -->

    <!-- ## Generic.NamingConventions.ConstructorName -->
    <!-- Bans PHP 4 style constructors -->
    <!--    * OldStyle: PHP4 style constructors are not allowed; use "__construct()" instead -->
    <!--    * OldStyleCall: PHP4 style calls to parent constructors are not allowed; use "parent::__construct()" instead -->
    <rule ref="Generic.NamingConventions.ConstructorName" />

    <!-- ## Generic.NamingConventions.UpperCaseConstantName -->
    <!-- Ensures that constant names are all uppercase -->
    <!--    * ClassConstantNotUpperCase: Class constants must be uppercase; expected %s but found %s -->
    <!--    * ConstantNotUpperCase: Constants must be uppercase; expected %s but found %s -->
    <rule ref="Generic.NamingConventions.UpperCaseConstantName" />



    <!-- # Generic.PHP -->

    <!-- ## Generic.PHP.BacktickOperator -->
    <!-- Bans the use of the backtick execution operator -->
    <!--    * Found: Use of the backtick operator is forbidden -->
    <rule ref="Generic.PHP.BacktickOperator" />

    <!-- ## Generic.PHP.CharacterBeforePHPOpeningTag -->
    <!-- Checks that the opening PHP tag is the first content in a file -->
    <!--    * Found: The opening PHP tag must be the first content in the file -->
    <rule ref="Generic.PHP.CharacterBeforePHPOpeningTag" />

    <!-- ## Generic.PHP.ClosingPHPTag -->
    <!-- Checks that open PHP tags are paired with closing tags -->
    <!--    * NotFound: The PHP open tag does not have a corresponding PHP close tag -->

    <!-- ## Generic.PHP.DeprecatedFunctions -->
    <!-- Discourages the use of deprecated PHP functions -->
    <!--    * Deprecated: Function %s() has been deprecated -->
    <rule ref="Generic.PHP.DeprecatedFunctions">
        <properties>
            <property name="forbiddenFunctions" type="array" value="create_function=>null,print=>echo,split=>explode" />
        </properties>
    </rule>

    <!-- ## Generic.PHP.DisallowAlternativePHPTags -->
    <!-- Verifies that no alternative PHP tags are used -->
    <!--    * ASPOpenTagFound: ASP style opening tag used; expected "<?php" but found "%s" -->
    <!--    * ScriptOpenTagFound: Script style opening tag used; expected "<?php" but found "%s" -->
    <!--    * ASPShortOpenTagFound: ASP style opening tag used with echo; expected "<?php echo %s ..." but found "%s %s ..." -->
    <!--    * ScriptOpenTagFound: Script style opening tag used; expected "<?php" but found "%s" -->
    <!--    * MaybeASPShortOpenTagFound: Possible use of ASP style short opening tags detected; found: %s -->
    <!--    * MaybeASPOpenTagFound: Possible use of ASP style opening tags detected; found: %s -->
    <rule ref="Generic.PHP.DisallowAlternativePHPTags" />

    <!-- ## Generic.PHP.DisallowShortOpenTag -->
    <!-- Makes sure that shorthand PHP open tags are not used -->
    <!--    * Found: Short PHP opening tag used; expected "<?php" but found "%s" -->
    <!--    * EchoFound: Short PHP opening tag used with echo; expected "<?php echo %s ..." but found "%s %s ..." -->
    <!--    * PossibleFound: Possible use of short open tags detected; found: %s -->
    <rule ref="Generic.PHP.DisallowShortOpenTag" />

    <!-- ## Generic.PHP.ForbiddenFunctions -->
    <!-- Discourages the use of alias functions -->
    <!--    * Found(WithAlternative): The use of function %s() is forbidden(; use %s() instead) -->
    <!--    * Discouraged(WithAlternative): The use of function %s() is discouraged(; use %s() instead) -->
    <!-- Forbidden functions:       -->
    <!--    * 'sizeof' => 'count'    -->
    <!--    * 'delete' => 'unset'   -->
    <rule ref="Generic.PHP.ForbiddenFunctions" />

    <!-- ## Generic.PHP.LowerCaseConstant -->
    <!-- Checks that all uses of true, false and null are lowercase -->
    <!--    * Found: TRUE, FALSE and NULL must be lowercase; expected "%s" but found "%s" -->
    <rule ref="Generic.PHP.LowerCaseConstant" />

    <!-- ## Generic.PHP.LowerCaseKeyword -->
    <!-- Checks that all PHP keywords are lowercase -->
    <!--    * Found: PHP keywords must be lowercase; expected "%s" but found "%s" -->
    <rule ref="Generic.PHP.LowerCaseKeyword" />

    <!-- ## Generic.PHP.NoSilencedErrors -->
    <!-- Throws an error or warning when any code prefixed with an asperand is encountered -->
    <!--    * Forbidden: Silencing errors is forbidden -->
    <!--    * Discouraged: Silencing errors is discouraged -->
    <rule ref="Generic.PHP.NoSilencedErrors" />

    <!-- ## Generic.PHP.SAPIUsage -->
    <!-- Ensures the PHP_SAPI constant is used instead of php_sapi_name() -->
    <!--    * FunctionFound: Use the PHP_SAPI constant instead of calling php_sapi_name() -->
    <rule ref="Generic.PHP.SAPIUsage" />

    <!-- ## Generic.PHP.Syntax -->
    <!-- Ensures PHP believes the syntax is clean -->
    <!--    * PHPSyntax: PHP syntax error: $error -->
    <rule ref="Generic.PHP.Syntax" />

    <!-- ## Generic.PHP.UpperCaseConstant -->
    <!-- Checks that all uses of TRUE, FALSE and NULL are uppercase -->
    <!--    * Found: TRUE, FALSE and NULL must be uppercase; expected "%s" but found "%s" -->


    <!-- # Generic.Strings -->

    <!-- ## Generic.Strings.UnnecessaryStringConcat -->
    <!-- Checks that two strings are not concatenated together; suggests using one string instead -->
    <!--    * Found: String concat is not required here; use a single string instead -->


    <!-- # Generic.VersionControl -->

    <!-- ## Generic.VersionControl.SubversionProperties -->
    <!-- Tests that the correct Subversion properties are set -->
    <!--    * Unexpected: Unexpected Subversion property "%s" = "%s" -->
    <!--    * Missing: Missing Subversion property "%s" = "%s" -->
    <!--    * NoMatch: Subversion property "%s" = "%s" does not match "%s" -->


    <!-- # Generic.WhiteSpace -->

    <!-- ## Generic.WhiteSpace.DisallowSpaceIndent -->
    <!-- Throws errors if spaces are used for indentation other than precision indentation -->
    <!--    * SpacesUsed: Tabs must be used to indent lines; spaces are not allowed -->

    <!-- ## Generic.WhiteSpace.DisallowTabIndent -->
    <!-- Throws errors if tabs are used for indentation -->
    <!--    * TabsUsed: Spaces must be used to indent lines; tabs are not allowed -->
    <!--    * NonIndentTabsUsed: Spaces must be used for alignment; tabs are not allowed -->
    <rule ref="Generic.WhiteSpace.DisallowTabIndent" />

    <!-- ## Generic.WhiteSpace.ScopeIndent -->
    <!-- Checks that control structures are defined and indented correctly -->
    <!--    * IncorrectExact: Line indented incorrectly; expected … -->
    <!--    * Incorrect: Line indented incorrectly; expected at least … -->
    <rule ref="Generic.WhiteSpace.ScopeIndent">
        <properties>
            <property name="ignoreIndentationTokens" type="array" value="T_COMMENT" />
        </properties>
    </rule>



    <!-- ==== -->
    <!-- PEAR -->
    <!-- ==== -->


    <!-- # PEAR.Classes -->

    <!-- ## PEAR.Classes.ClassDeclaration -->
    <!-- Checks the declaration of the class is correct -->
    <!--    * MissingBrace: Possible parse error: %s missing opening or closing brace -->
    <!--    * OpenBraceNewLine: Opening brace of a %s must be on the line after the definition -->
    <!--    * OpenBraceWrongLine: Opening brace of a %s must be on the line following the %s declaration; found %s line(s) -->
    <!--    * OpenBraceNotAlone: Opening %s brace must be on a line by itself -->
    <!--    * SpaceBeforeBrace: Expected %s spaces before opening brace; %s found -->
    <!-- 注意：启用合乎项目要求的规则 PSR2.Classes.ClassDeclaration ，而非本规则 -->


    <!-- # PEAR.Commenting -->

    <!-- ## PEAR.Commenting.ClassComment -->
    <!-- Parses and verifies the doc comments for classes -->
    <!--    * Missing: Missing class doc comment -->
    <!--    * WrongStyle: You must use "/**" style comments for a class comment -->
    <!--    * InvalidVersion: Invalid version "%s" in doc comment; consider "Release: <package_version>" instead -->
    <!--    * Missing{$tag}Tag: Missing %s tag in %s comment -->
    <rule ref="PEAR.Commenting.ClassComment">
        <exclude name="PEAR.Commenting.ClassComment.AuthorTagOrder" />
        <exclude name="PEAR.Commenting.ClassComment.MissingAuthorTag" />
        <exclude name="PEAR.Commenting.ClassComment.MissingCategoryTag" />
        <exclude name="PEAR.Commenting.ClassComment.MissingLicenseTag" />
        <exclude name="PEAR.Commenting.ClassComment.MissingLinkTag" />
        <exclude name="PEAR.Commenting.ClassComment.MissingPackageTag" />
    </rule>

    <!-- ## PEAR.Commenting.FileComment -->
    <!-- Parses and verifies the doc comments for files -->
    <!--    * WrongStyle: You must use "/**" style comments for a file comment -->
    <!--    * Missing: Missing file doc comment -->
    <!--    * MissingVersion: PHP version not specified -->
    <!--    * Duplicate{$tag}Tag: Only one %s tag is allowed in a %s comment -->
    <!--    * Empty{$tag}Tag: Content missing for %s tag in %s comment -->
    <!--    * Missing{$tag}Tag: Missing %s tag in %s comment -->
    <!--    * {$tag}TagOrder: The tag in position %s should be the %s tag -->
    <!--    * InvalidCategory: Category name "%s" is not valid; consider "%s" instead -->
    <!--    * InvalidPackageValue: Package name "%s" is not valid -->
    <!--    * InvalidPackage: Package name "%s" is not valid; consider "%s" instead -->
    <!--    * InvalidSubpackage: Subpackage name "%s" is not valid; consider "%s" instead -->
    <!--    * InvalidAuthors: Content of the @author tag must be in the form "Display Name <username@example.com>" -->
    <!--    * CopyrightHyphen: A hyphen must be used between the earliest and latest year -->
    <!--    * InvalidCopyright: Invalid year span \"…\" found; consider \"…\" instead -->
    <!--    * IncompleteCopyright: @copyright tag must contain a year and the name of the copyright holder -->
    <!--    * IncompleteLicense: @license tag must contain a URL and a license name -->
    <!--    * InvalidVersion: Invalid version "%s" in file comment; consider "CVS: <cvs_id>" or "SVN: <svn_id>" or "GIT: <git_id>" or "HG: <hg_id>" instead -->
    <rule ref="PEAR.Commenting.FileComment.WrongStyle" />
    <rule ref="PEAR.Commenting.FileComment.Missing" />

    <!-- ## PEAR.Commenting.FunctionComment -->
    <!-- Parses and verifies the doc comments for functions -->
    <!--    * Missing: Missing function doc comment -->
    <!--    * WrongStyle: You must use "/**" style comments for a function comment -->
    <!--    * SpacingAfter: There must be no blank lines after the function comment -->
    <!--    * EmptySees: Content missing for @see tag in function comment -->
    <!--    * DuplicateReturn: Only 1 @return tag is allowed in a function comment -->
    <!--    * MissingReturnType: Return type missing for @return tag in function comment -->
    <!--    * MissingReturn: Missing @return tag in function comment -->
    <!--    * InvalidThrows: Exception type missing for @throws tag in function comment -->
    <!--    * MissingParamComment: Missing parameter comment -->
    <!--    * MissingParamName: Missing parameter name -->
    <!--    * MissingParamType: Missing parameter type -->
    <!--    * SpacingAfterParamType: Expected %s spaces after parameter type; %s found -->
    <!--    * ParamNameNoMatch: Doc comment for parameter %s does not match actual variable name %s -->
    <!--    * ParamNameNoCaseMatch: Doc comment for parameter %s does not match case of actual variable name %s -->
    <!--    * ExtraParamComment: Superfluous parameter comment -->
    <!--    * SpacingAfterParamName: Expected %s spaces after parameter name; %s found -->
    <!--    * ParamCommentAlignment: Parameter comment not aligned correctly; expected %s spaces but found %s -->
    <!--    * MissingParamTag: Doc comment for parameter "%s" missing -->
    <rule ref="PEAR.Commenting.FunctionComment">
        <exclude name="PEAR.Commenting.FunctionComment.Missing" />
        <exclude name="PEAR.Commenting.FunctionComment.MissingReturn" />
        <exclude name="PEAR.Commenting.FunctionComment.MissingParamComment" />
        <exclude name="PEAR.Commenting.FunctionComment.ParamCommentAlignment" />
    </rule>

    <!-- ## PEAR.Commenting.InlineComment -->
    <!-- Checks that no Perl-style comments are used -->
    <!--    * WrongStyle: Perl-style comments are not allowed. Use "// Comment." or "/* comment */" instead. -->
    <!-- 用 '//' 或 '/* … */' 来注释，不要使用 '#' -->
    <rule ref="PEAR.Commenting.InlineComment" />


    <!-- # PEAR.ControlStructures -->

    <!-- ## PEAR.ControlStructures.ControlSignature -->
    <!-- Verifies that control statements conform to their coding standards -->
    <!--    Patterns:                       -->
    <!--    * 'do {EOL...} while (...);EOL' -->
    <!--    * 'while (...) {EOL'            -->
    <!--    * 'for (...) {EOL'              -->
    <!--    * 'if (...) {EOL'               -->
    <!--    * 'foreach (...) {EOL'          -->
    <!--    * '} else if (...) {EOL'        -->
    <!--    * '} elseif (...) {EOL'         -->
    <!--    * '} else {EOL'                 -->
    <!--    * 'do {EOL'                     -->
    <rule ref="PEAR.ControlStructures.ControlSignature" />

    <!-- ## PEAR.ControlStructures.MultiLineCondition -->
    <!-- Ensure multi-line IF conditions are defined correctly -->
    <!--    * SpacingAfterOpenBrace: First condition of a multi-line IF statement must directly follow the opening parenthesis -->
    <!--    * CloseBracketNewLine: Closing parenthesis of a multi-line IF statement must be on a new line -->
    <!--    * Alignment: Multi-line IF statement not indented correctly; expected %s spaces but found %s -->
    <!--    * StartWithBoolean: Each line in a multi-line IF statement must begin with a boolean operator -->
    <!--    * SpaceBeforeOpenBrace: There must be a single space between the closing parenthesis and the opening brace of a multi-line IF statement; found %s spaces -->
    <!--    * NewlineBeforeOpenBrace: There must be a single space between the closing parenthesis and the opening brace of a multi-line IF statement; found newline -->
    <rule ref="PEAR.ControlStructures.MultiLineCondition">
        <exclude name="PEAR.ControlStructures.MultiLineCondition.CloseBracketNewLine" />
        <exclude name="PEAR.ControlStructures.MultiLineCondition.Alignment" />
        <exclude name="PEAR.ControlStructures.MultiLineCondition.StartWithBoolean" />
    </rule>


    <!-- # PEAR.Files -->

    <!-- ## PEAR.Files.IncludingFile -->
    <!-- Ensure include_once is used in conditional situations and require_once is used elsewhere -->
    <!--    * BracketsNotRequired: "%s" is a statement not a function; no parentheses are required -->
    <!--    * UseIncludeOnce: File is being conditionally included; use "include_once" instead -->
    <!--    * UseInclude: File is being conditionally included; use "include" instead -->
    <!--    * UseRequireOnce: File is being unconditionally included; use "require_once" instead -->
    <!--    * UseRequire: File is being unconditionally included; use "require" instead -->
    <rule ref="PEAR.Files.IncludingFile" />


    <!-- # PEAR.Formatting -->

    <!-- ## PEAR.Formatting.MultiLineAssignment -->
    <!-- If an assignment goes over two lines, ensure the equal sign is indented -->
    <!--    * EqualSignLine: Multi-line assignments must have the equal sign on the second line -->
    <!--    * Indent: Multi-line assignment not indented correctly; expected %s spaces but found %s -->
    <rule ref="PEAR.Formatting.MultiLineAssignment" />


    <!-- # PEAR.Functions -->

    <!-- ## PEAR.Functions.FunctionCallSignature -->
    <!-- Ensures function calls are formatted correctly -->
    <!--    * SpaceBeforeOpenBracket: Space before opening parenthesis of function call prohibited -->
    <!--    * SpaceAfterCloseBracket: Space after closing parenthesis of function call prohibited -->
    <!--    * SpaceAfterOpenBracket: Space after opening parenthesis of function call prohibited -->
    <!--    * SpaceAfterOpenBracket: Expected %s spaces after opening bracket; %s found -->
    <!--    * SpaceBeforeCloseBracket: Expected %s spaces before closing bracket; %s found -->
    <!--    * ContentAfterOpenBracket: Opening parenthesis of a multi-line function call must be the last content on the line -->
    <!--    * CloseBracketLine: Closing parenthesis of a multi-line function call must be on a line by itself -->
    <!--    * EmptyLine: Empty lines are not allowed in multi-line function calls -->
    <!--    * Indent: Multi-line function call not indented correctly; expected %s spaces but found %s -->
    <!--    * MultipleArguments: Only one argument is allowed per line in a multi-line function call -->
    <!-- 注意：有更完善的标准 PSR2.Functions.FunctionCallSignature ，包含本规则，此处不再重复设置 -->

    <!-- ## PEAR.Functions.FunctionDeclaration -->
    <!-- Ensure single and multi-line function declarations are defined correctly -->
    <!--    * SpaceAfterFunction: Expected 1 space after FUNCTION keyword; %s found -->
    <!--    * SpaceBeforeOpenParen: Expected 0 spaces before opening parenthesis; %s found -->
    <!--    * SpaceAfterUse: Expected 1 space after USE keyword; found %s -->
    <!--    * SpaceBeforeUse: Expected 1 space before USE keyword; found %s -->
    <!--    * CloseBracketLine: The closing parenthesis of a multi-line function declaration must be on a new line -->
    <!--    * UseCloseBracketLine: The closing parenthesis of a multi-line use declaration must be on a new line -->
    <!--    * EmptyLine: Blank lines are not allowed in a multi-line function declaration -->
    <!--    * Indent: Multi-line function declaration not indented correctly; expected %s spaces but found %s -->
    <!--    * NewlineBeforeOpenBrace: The closing parenthesis and the opening brace of a multi-line function declaration must be on the same line -->
    <!--    * SpaceBeforeOpenBrace: There must be a single space between the closing parenthesis and the opening brace of a multi-line function declaration; found %s spaces -->
    <rule ref="PEAR.Functions.FunctionDeclaration" />

    <!-- ## PEAR.Functions.ValidDefaultValue -->
    <!-- Ensures function params with default values are at the end of the declaration -->
    <!--    * NotAtEnd: Arguments with default values must be at the end of the argument list -->
    <rule ref="PEAR.Functions.ValidDefaultValue" />


    <!-- # PEAR.NamingConventions -->

    <!-- ## PEAR.NamingConventions.ValidClassName -->
    <!-- Ensures class and interface names start with a capital letter and use _ separators -->
    <!--    * StartWithCapital: %s name must begin with a capital letter -->
    <!--    * Invalid: %s name is not valid(; consider %s instead) -->
    <rule ref="PEAR.NamingConventions.ValidClassName" />

    <!-- ## PEAR.NamingConventions.ValidFunctionName -->
    <!-- Ensures method and function names are correct -->
    <!--    * MethodDoubleUnderscore: Method name "%s" is invalid; only PHP magic methods should be prefixed with a double underscore -->
    <!--    * PrivateNoUnderscore: Private method name "%s" must be prefixed with an underscore -->
    <!--    * PublicUnderscore: %s method name "%s" must not be prefixed with an underscore -->
    <!--    * ScopeNotCamelCaps: %s method name "%s" is not in camel caps format -->
    <!--    * NotCamelCaps: Method name "%s" is not in camel caps format -->
    <!--    * FunctionDoubleUnderscore: Function name "%s" is invalid; only PHP magic methods should be prefixed with a double underscore -->
    <!--    * FunctionUnderscore: Function name "%s" is invalid; only private methods should be prefixed with an underscore -->
    <!--    * FunctionNoCapital: Function name "%s" is prefixed with a package name but does not begin with a capital letter -->
    <!--    * FunctionInvalid: Function name "%s" is not valid; name appears incomplete -->
    <!--    * FunctionNameInvalid: Function name "%s" is invalid; consider "%s" instead -->
    <rule ref="PEAR.NamingConventions.ValidFunctionName">
        <exclude name="PEAR.NamingConventions.ValidFunctionName.PrivateNoUnderscore" />
        <exclude name="PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps" />
    </rule>

    <!-- ## PEAR.NamingConventions.ValidVariableName -->
    <!-- Checks the naming of member variables -->
    <!--    * PrivateNoUnderscore: Private member variable "%s" must be prefixed with an underscore -->
    <!--    * PublicUnderscore: %s member variable "%s" must not be prefixed with an underscore -->
    <!-- 注意：其它标准有类似的 Zend.NamingConventions.ValidVariableName，此处不再重复设置 -->


    <!-- # PEAR.WhiteSpace -->

    <!-- ## PEAR.WhiteSpace.ObjectOperatorIndent -->
    <!-- Checks that object operators are indented correctly -->
    <!--    * Incorrect: Object operator not indented correctly; expected %s spaces but found %s -->
    <!--    * StartOfLine: Object operator must be at the start of the line, not the end -->
    <rule ref="PEAR.WhiteSpace.ObjectOperatorIndent" />

    <!-- ## PEAR.WhiteSpace.ScopeClosingBrace -->
    <!-- Checks that the closing braces of scopes are aligned correctly -->
    <!--    * Line: Closing brace must be on a line by itself -->
    <!--    * BreakIndent: Case breaking statement indented incorrectly; expected %s spaces, found %s -->
    <!--    * Indent: Closing brace indented incorrectly; expected %s spaces, found %s -->
    <rule ref="PEAR.WhiteSpace.ScopeClosingBrace" />

    <!-- ## PEAR.WhiteSpace.ScopeIndent -->
    <!-- Checks that control structures are structured and indented correctly -->
    <!-- 注意：启用合乎项目要求的规则 Generic.WhiteSpace.ScopeIndent ，而非本规则 -->



    <!-- ==== -->
    <!-- PSR1 -->
    <!-- ==== -->


    <!-- # PSR1.Classes -->

    <!-- ## PSR1.Classes.ClassDeclaration -->
    <!-- Checks the declaration of the class is correct -->
    <!--    * MultipleClasses: Each %s must be in a file by itself -->
    <!--    * MissingNamespace: Each %s must be in a namespace of at least one level (a top-level vendor name) -->
    <!-- 注意：启用合乎项目要求的规则 Squiz.Classes.ClassDeclaration ，而非本规则 -->


    <!-- # PSR1.Files -->

    <!-- ## PSR1.Files.SideEffects -->
    <!-- Ensures a file declares new symbols and causes no other side effects, or executes logic with side effects, but not both -->
    <!--    * FoundWithSymbols: A file should declare new symbols (classes, functions, constants, etc.) and cause no other side effects, or it should execute logic with side effects, but should not do both. The first symbol is defined on line %s and the first side effect is on line %s. -->
    <rule ref="PSR1.Files.SideEffects" />


    <!-- # PSR1.Methods -->

    <!-- ## PSR1.Methods.CamelCapsMethodName -->
    <!-- Ensures method names are defined using camel case -->
    <!--    * NotCamelCaps: Method name "%s" is not in camel caps format -->
    <rule ref="PSR1.Methods.CamelCapsMethodName" />



    <!-- ==== -->
    <!-- PSR2 -->
    <!-- ==== -->


    <!-- # PSR2.Classes -->

    <!-- ## PSR2.Classes.ClassDeclaration -->
    <!-- Checks the declaration of the class and its inheritance is correct -->
    <!--    * SpaceBeforeKeyword: Expected 1 space between %s and %s keywords; %s found -->
    <!--    * NewlineBeforeKeyword: Expected 1 space between %s and %s keywords; newline found -->
    <!--    * SpaceAfterKeyword: Expected 1 space between %s keyword and %s name; %s found -->
    <!--    * SpaceAfterName: Expected 1 space after %s name; %s found -->
    <!--    * {$keywordType}Line: The $keywordType keyword must be on the same line as the %s name -->
    <!--    * SpaceBefore{$keywordType}: Expected 1 space before $keywordType keyword; %s found -->
    <!--    * FirstExtendsInterfaceSameLine: The first item in a multi-line extends list must be on the line following the extends keyword -->
    <!--    * FirstInterfaceSameLine: The first item in a multi-line implements list must be on the line following the implements keyword -->
    <!--    * ExtendsInterfaceSameLine: Only one interface may be specified per line in a multi-line extends declaration -->
    <!--    * InterfaceSameLine: Only one interface may be specified per line in a multi-line implements declaration -->
    <!--    * InterfaceWrongIndent: Expected %s spaces before interface name; %s found -->
    <!--    * NoSpaceBeforeName: Expected 1 space before "%s"; 0 found -->
    <!--    * SpaceBeforeName: Expected 1 space before "%s"; %s found -->
    <!--    * SpaceBeforeComma: Expected 0 spaces between "%s" and comma; %s found -->
    <!--    * CloseBraceAfterBody: The closing brace for the %s must go on the next line after the body -->
    <!--    * CloseBraceSameLine: Closing %s brace must be on a line by itself -->
    <!-- 注意：启用合乎项目要求的规则 Squiz.Classes.ClassDeclaration ，而非本规则 -->

    <!-- ## PSR2.Classes.PropertyDeclaration -->
    <!-- Verifies that properties are declared correctly -->
    <!--    * Underscore: Property name "%s" should not be prefixed with an underscore to indicate visibility -->
    <!--    * VarUsed: The var keyword must not be used to declare a property -->
    <!--    * Multiple: There must not be more than one property declared per statement -->
    <!--    * ScopeMissing: Visibility must be declared on property "%s" -->
    <rule ref="PSR2.Classes.PropertyDeclaration" />


    <!-- # PSR2.ControlStructures -->

    <!-- ## PSR2.ControlStructures.ControlStructureSpacing -->
    <!-- Checks that control structures have the correct spacing around brackets -->
    <!--    * SpacingAfterOpenBrace: Expected %s spaces after opening bracket; %s found -->
    <!--    * SpaceBeforeCloseBrace: Expected %s spaces before closing bracket; %s found -->
    <rule ref="PSR2.ControlStructures.ControlStructureSpacing" />

    <!-- ## PSR2.ControlStructures.ElseIfDeclaration -->
    <!-- Verifies that there are no else if statements (elseif should be used instead) -->
    <!--    * NotAllowed: Usage of ELSE IF is discouraged; use ELSEIF instead -->
    <rule ref="PSR2.ControlStructures.ElseIfDeclaration" />
    <!-- 有争议，所以去掉该规则。但建议新项目启动时就启用 -->

    <!-- ## PSR2.ControlStructures.SwitchDeclaration -->
    <!-- Ensures all switch statements are defined correctly -->
    <!--    * {$type}NotLower: $type keyword must be lowercase; expected "%s" but found "%s" -->
    <!--    * SpacingAfterCase: CASE keyword must be followed by a single space -->
    <!--    * SpaceBeforeColon{$type}: There must be no space before the colon in a $type statement -->
    <!--    * BodyOnNextLine{$type}: The $type body must start on the line following the statement -->
    <!--    * BreakNotNewLine: Terminating statement must be on a line by itself -->
    <!--    * BreakIndent: Terminating statement must be indented to the same level as the CASE body -->
    <!--    * WrongOpener{$type}: $type statements must be defined using a colon -->
    <!--    * TerminatingComment: There must be a comment when fall-through is intentional in a non-empty case body -->
    <rule ref="PSR2.ControlStructures.SwitchDeclaration" />


    <!-- # PSR2.Files -->

    <!-- ## PSR2.Files.ClosingTag -->
    <!-- Checks that the file does not end with a closing tag -->
    <!--    * NotAllowed: A closing tag is not permitted at the end of a PHP file -->
    <rule ref="PSR2.Files.ClosingTag" />

    <!-- ## PSR2.Files.EndFileNewline -->
    <!-- Ensures the file ends with a newline character -->
    <!--    * NoneFound: Expected 1 newline at end of file; 0 found -->
    <!--    * TooMany: Expected 1 blank line at end of file; %s found -->
    <!-- EOF (end of file) 有且只有一空行 -->
    <rule ref="PSR2.Files.EndFileNewline" />


    <!-- # PSR2.Methods -->

    <!-- ## PSR2.Methods.FunctionCallSignature -->
    <!-- Checks that the function call format is correct -->
    <!-- Why is PSR2.Methods.FunctionCallSignature better than PEAR.Functions.FunctionCallSignature ? -->
    <!--    * It includes all the errors from the PEAR standard, plus some of our own. -->
    <rule ref="PSR2.Methods.FunctionCallSignature">
        <exclude name="PSR2.Methods.FunctionCallSignature.MultipleArguments" />
    </rule>

    <!-- ## PSR2.Methods.FunctionClosingBrace -->
    <!-- Checks that the closing brace of a function goes directly after the body -->
    <!--    * SpacingBeforeClose: Function closing brace must go on the next line following the body; found %s blank lines before brace -->
    <rule ref="PSR2.Methods.FunctionClosingBrace" />

    <!-- ## PSR2.Methods.MethodDeclaration -->
    <!-- Checks that the method declaration is correct -->
    <!--    * Underscore: Method name "%s" should not be prefixed with an underscore to indicate visibility -->
    <!--    * FinalAfterVisibility: The final declaration must precede the visibility declaration -->
    <!--    * AbstractAfterVisibility: The abstract declaration must precede the visibility declaration -->
    <!--    * StaticBeforeVisibility: The static declaration must come after the visibility declaration -->
    <rule ref="PSR2.Methods.MethodDeclaration" />


    <!-- # PSR2.Namespaces -->

    <!-- ## PSR2.Namespaces.NamespaceDeclaration -->
    <!-- Ensures namespaces are declared correctly -->
    <!--    * BlankLineAfter: There must be one blank line after the namespace declaration -->
    <rule ref="PSR2.Namespaces.NamespaceDeclaration" />

    <!-- ## PSR2.Namespaces.UseDeclaration -->
    <!-- Ensures USE blocks are declared correctly -->
    <!--    * SpaceAfterUse: There must be a single space after the USE keyword -->
    <!--    * MultipleDeclarations: There must be one USE keyword per declaration -->
    <!--    * UseAfterNamespace: USE declarations must go after the first namespace declaration -->
    <!--    * SpaceAfterLastUse: There must be one blank line after the last USE statement; %s found; -->
    <rule ref="PSR2.Namespaces.UseDeclaration" />



    <!-- ===== -->
    <!-- Squiz -->
    <!-- ===== -->


    <!-- # Squiz.Arrays -->

    <!-- ## Squiz.Arrays.ArrayBracketSpacing -->
    <!-- Ensure that there are no spaces around square brackets -->
    <!--    * SpaceBeforeBracket: Space found before square bracket; expected "%s" but found "%s" -->
    <!--    * SpaceAfterBracket: Space found after square bracket; expected "%s" but found "%s" -->
    <rule ref="Squiz.Arrays.ArrayBracketSpacing" />

    <!-- ## Squiz.Arrays.ArrayDeclaration -->
    <!-- Ensures that arrays conform to the array coding standard -->
    <!--    * NotLowerCase: Array keyword should be lower case; expected "array" but found "%s" -->
    <!--    * SpaceAfterKeyword: There must be no space between the "array" keyword and the opening parenthesis -->
    <!--    * SpaceInEmptyArray: Empty array declaration must have no space between the parentheses -->
    <!--    * CommaAfterLast: Comma not allowed after last value in single-line array declaration -->
    <!--    * NoSpaceBeforeDoubleArrow: Expected 1 space between "%s" and double arrow; 0 found -->
    <!--    * SpaceBeforeDoubleArrow: Expected 1 space between "%s" and double arrow; %s found -->
    <!--    * NoSpaceAfterDoubleArrow: Expected 1 space between double arrow and "%s"; 0 found -->
    <!--    * SpaceAfterDoubleArrow: Expected 1 space between double arrow and "%s"; %s found -->
    <!--    * SingleLineNotAllowed: Array with multiple values cannot be declared on a single line -->
    <!--    * NoSpaceAfterComma: Expected 1 space between comma and "%s"; 0 found -->
    <!--    * SpaceAfterComma: Expected 1 space between comma and "%s"; %s found -->
    <!--    * SpaceBeforeComma: Expected 0 spaces between "%s" and comma; %s found -->
    <!--    * CloseBraceNewLine: Closing parenthesis of array declaration must be on a new line -->
    <!--    * CloseBraceNotAligned: Closing parenthesis not aligned correctly; expected %s space(s) but found %s -->
    <!--    * NoKeySpecified: No key specified for array entry; first entry specifies key -->
    <!--    * SpaceBeforeComma: Expected 0 spaces between "%s" and comma; %s found -->
    <!--    * KeySpecified: Key specified for array entry; first entry has no key -->
    <!--    * MultiLineNotAllowed: Multi-line array contains a single value; use single-line array instead -->
    <!--    * NoCommaAfterLast: Comma required after last value in array declaration -->
    <!--    * ValueNoNewline: Each value in a multi-line array must be on a new line -->
    <!--    * ValueNotAligned: Array value not aligned correctly; expected %s spaces but found %s -->
    <!--    * FirstValueNoNewline: The first value in a multi-value array must be on a new line -->
    <!--    * FirstIndexNoNewline: The first index in a multi-value array must be on a new line -->
    <!--    * IndexNoNewline: Each index in a multi-line array must be on a new line -->
    <!--    * KeyNotAligned: Array key not aligned correctly; expected %s spaces but found %s -->
    <!--    * DoubleArrowNotAligned: Array double arrow not aligned correctly; expected %s space(s) but found %s -->
    <!--    * ValueNotAligned: Array value not aligned correctly; expected %s space(s) but found %s -->
    <!--    * NoComma: Each line in an array declaration must end in a comma -->
    <!--    * SpaceBeforeComma: Expected 0 spaces between "%s" and comma; %s found -->
    <rule ref="Squiz.Arrays.ArrayDeclaration">
        <exclude name="Squiz.Arrays.ArrayDeclaration.SingleLineNotAllowed" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.CloseBraceNotAligned" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.NoKeySpecified" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.KeySpecified" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.MultiLineNotAllowed" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.ValueNoNewline" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.IndexNoNewline" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.KeyNotAligned" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.DoubleArrowNotAligned" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.ValueNotAligned" />
    </rule>


    <!-- # Squiz.Classes -->

    <!-- ## Squiz.Classes.ClassDeclaration -->
    <!-- Checks the declaration of the class and its inheritance is correct -->
    <!--    * MultipleClasses: Only one interface or class is allowed in a file -->
    <!--    * SpaceBeforeKeyword: Expected 0 spaces before %s keyword; %s found -->
    <!--    * CloseBraceSameLine: Closing %s brace must be on a line by itself -->
    <!--    * NewLineBeforeCloseBrace: Expected 0 spaces before closing brace; newline found -->
    <!--    * SpaceBeforeCloseBrace: Expected 0 spaces before closing brace; %s found -->
    <!--    * NewlinesAfterCloseBrace: Closing brace of a %s must be followed by a single blank line; found %s -->
    <!-- Why is Squiz.Classes.ClassDeclaration better than PEAR.Classes.ClassDeclaration and PSR2.Classes.ClassDeclaration ?   -->
    <!--    * It includes all the errors from the PEAR & PSR2 standard, plus some of our own.      -->
    <rule ref="Squiz.Classes.ClassDeclaration" />

    <!-- ## Squiz.Classes.ClassFileName -->
    <!-- Tests that the file name and the name of the class contained within the file match -->
    <!--    * NoMatch: %s name doesn\'t match filename; expected "%s %s" -->

    <!-- ## Squiz.Classes.DuplicateProperty -->
    <!-- Ensures JS classes don't contain duplicate property names -->
    <!--    * Found: Duplicate property definition found for "%s"; previously defined on line %s -->
    <rule ref="Squiz.Classes.DuplicateProperty" />

    <!-- ## Squiz.Classes.LowercaseClassKeywords -->
    <!-- Ensures all class keywords are lowercase -->
    <!--    * FoundUppercase: %s keyword must be lowercase; expected "%s" but found "%s" -->
    <rule ref="Squiz.Classes.LowercaseClassKeywords" />

    <!-- ## Squiz.Classes.SelfMemberReference -->
    <!-- Tests self member references -->
    <!--    * IncorrectCase: Must use "self::" for local static member reference; found "%s::" -->
    <!--    * NotUsed: Must use "self::" for local static member reference -->
    <!--    * SpaceBefore: Expected 0 spaces before double colon; %s found -->
    <!--    * SpaceAfter: Expected 0 spaces after double colon; %s found -->
    <rule ref="Squiz.Classes.SelfMemberReference">
        <exclude name="Squiz.Classes.SelfMemberReference.SpaceBefore" />
    </rule>

    <!-- ## Squiz.Classes.ValidClassName -->
    <!-- Ensures classes are in camel caps, and the first letter is capitalised -->
    <!--    * MissingBrace: Possible parse error: %s missing opening or closing brace -->
    <!--    * NotCamelCaps: %s name "%s" is not in camel caps format -->
    <!-- 注意：启用合乎项目要求的规则 PEAR.Classes.ValidClassName，而非本规则 -->


    <!-- # Squiz.Commenting -->

    <!-- ## Squiz.Commenting.BlockComment -->
    <!-- Verifies that block comments are used appropriately -->
    <!--    * WrongStart: Block comments must be started with /* -->
    <!--    * WrongEnd: Block comments must be ended with */ -->
    <!--    * Empty: Empty block comment not allowed -->
    <!--    * SingleLine: Single line block comment not allowed; use inline ("// text") comment instead -->
    <!--    * NoNewLine: Block comment text must start on a new line -->
    <!--    * HasEmptyLine: Empty line not allowed at start of comment -->
    <!--    * FirstLineIndent: First line of comment not aligned correctly; expected %s but found %s -->
    <!--    * NoCapital: Block comments must start with a capital letter -->
    <!--    * LineIndent: Comment line indented incorrectly; expected at least %s but found %s -->
    <!--    * CloserSameLine: Comment closer must be on a new line -->
    <!--    * LastLineIndent: Last line of comment aligned incorrectly; expected %s but found %s -->
    <!--    * HasEmptyLineBefore: Empty line not required before block comment -->
    <!--    * NoEmptyLineBefore: Empty line required before block comment -->
    <!--    * NoEmptyLineAfter: Empty line required after block comment -->
    <rule ref="Squiz.Commenting.BlockComment">
        <exclude name="Squiz.Commenting.BlockComment.WrongStart" />
        <exclude name="Squiz.Commenting.BlockComment.SingleLine" />
        <exclude name="Squiz.Commenting.BlockComment.NoNewLine" />
    </rule>

    <!-- ## Squiz.Commenting.ClassComment -->
    <!-- Parses and verifies the class doc comment -->
    <!--    * Missing: Missing class doc comment -->
    <!--    * WrongStyle: You must use "/**" style comments for a class comment -->
    <!--    * SpacingAfter: There must be no blank lines after the class comment -->
    <!--    * TagNotAllowed: %s tag is not allowed in class comment -->
    <rule ref="Squiz.Commenting.ClassComment">
        <exclude name="Squiz.Commenting.ClassComment.TagNotAllowed" />
    </rule>

    <!-- ## Squiz.Commenting.ClosingDeclarationComment -->
    <!-- Checks the //end ... comments on classes, interfaces and functions -->
    <!--    * Abstract: Possible parse error: non-abstract method defined as abstract -->
    <!--    * MissingBrace: Possible parse error: %s missing opening or closing brace -->
    <!--    * Misplaced: Expected %s directly after closing brace -->
    <!--    * Missing: Expected %s -->
    <!--    * Incorrect: Expected %s -->

    <!-- ## Squiz.Commenting.DocCommentAlignment -->
    <!-- Tests that the stars in a doc comment align correctly -->
    <!--    * SpaceBeforeStar: Expected %s space(s) before asterisk; %s found -->
    <!--    * NoSpaceAfterStar: Expected 1 space after asterisk; 0 found -->
    <!--    * SpaceAfterStar: Expected 1 space after asterisk; %s found -->
    <rule ref="Squiz.Commenting.DocCommentAlignment" />

    <!-- ## Squiz.Commenting.EmptyCatchComment -->
    <!-- Checks for empty catch clause without a comment -->
    <!--    * Missing: Empty CATCH statement must have a comment to explain why the exception is not handled -->
    <rule ref="Squiz.Commenting.EmptyCatchComment" />

    <!-- ## Squiz.Commenting.FileComment -->
    <!-- Parses and verifies the file doc comment -->
    <!--    * WrongStyle: You must use "/**" style comments for a file comment -->
    <!--    * Missing: Missing file doc comment -->
    <!--    * SpacingAfterOpen: There must be no blank lines before the file comment -->
    <!--    * SpacingAfterComment: There must be exactly one blank line after the file comment -->
    <!--    * Duplicate{$tag}Tag: Only one %s tag is allowed in a file comment -->
    <!--    * Empty{$tag}Tag: Content missing for %s tag in file comment -->
    <!--    * IncorrectAuthor: Expected "Squiz Pty Ltd <products@squiz.net>" for author tag -->
    <!--    * IncorrectCopyright: Expected "xxxx-xxxx Squiz Pty Ltd (ABN 77 084 670 600)" for copyright declaration -->
    <!--    * Missing{$tag}Tag: Missing %s tag in file comment -->
    <!--    * {$tag}TagOrder: The tag in position %s should be the %s tag -->
    <rule ref="Squiz.Commenting.FileComment">
        <exclude name="Squiz.Commenting.FileComment.MissingPackageTag" />
    </rule>

    <!-- ## Squiz.Commenting.FunctionComment -->
    <!-- Parses and verifies the doc comments for functions -->
    <!--    * DuplicateReturn: Only 1 @return tag is allowed in a function comment -->
    <!--    * MissingReturnType: Return type missing for @return tag in function comment -->
    <!--    * InvalidReturn: Expected "%s" but found "%s" for function return type -->
    <!--    * InvalidReturnVoid: Function return type is void, but function contains return statement -->
    <!--    * InvalidNoReturn: Function return type is not void, but function has no return statement -->
    <!--    * InvalidReturnNotVoid: Function return type is not void, but function is returning void here -->
    <!--    * MissingReturn: Missing @return tag in function comment -->
    <!--    * InvalidThrows: Exception type and comment missing for @throws tag in function comment -->
    <!--    * EmptyThrows: Comment missing for @throws tag in function comment -->
    <!--    * ThrowsNotCapital: @throws tag comment must start with a capital letter -->
    <!--    * ThrowsNoFullStop: @throws tag comment must end with a full stop -->
    <!--    * MissingParamComment: Missing parameter comment -->
    <!--    * MissingParamName: Missing parameter name -->
    <!--    * MissingParamType: Missing parameter type -->
    <!--    * (Scalar)TypeHintMissing: Type hint "%s" missing for %s -->
    <!--    * IncorrectTypeHint: Expected type hint "%s"; found "%s" for %s -->
    <!--    * InvalidTypeHint: Unknown type hint "%s" found for %s -->
    <!--    * IncorrectParamVarName: Expected "%s" but found "%s" for parameter type -->
    <!--    * ParamNameNoMatch: Doc comment for parameter %s does not match actual variable name %s -->
    <!--    * ParamNameNoCaseMatch: Doc comment for parameter %s does not match case of actual variable name %s -->
    <!--    * ExtraParamComment: Superfluous parameter comment -->
    <!--    * ParamCommentNotCapital: Parameter comment must start with a capital letter -->
    <!--    * ParamCommentFullStop: Parameter comment must end with a full stop -->
    <!--    * MissingParamTag: Doc comment for parameter "%s" missing -->
    <!--    * SpacingAfterParamType: Expected %s spaces after parameter type; %s found -->
    <!--    * SpacingAfterParamName: Expected %s spaces after parameter name; %s found -->
    <rule ref="Squiz.Commenting.FunctionComment">
        <exclude name="Squiz.Commenting.FunctionComment.InvalidReturn" />
        <exclude name="Squiz.Commenting.FunctionComment.MissingReturn" />
        <exclude name="Squiz.Commenting.FunctionComment.EmptyThrows" />
        <exclude name="Squiz.Commenting.FunctionComment.MissingParamComment" />
        <exclude name="Squiz.Commenting.FunctionComment.TypeHintMissing" />
        <exclude name="Squiz.Commenting.FunctionComment.ScalarTypeHintMissing" />
        <exclude name="Squiz.Commenting.FunctionComment.IncorrectParamVarName" />
        <exclude name="Squiz.Commenting.FunctionComment.ParamCommentNotCapital" />
        <exclude name="Squiz.Commenting.FunctionComment.ParamCommentFullStop" />
        <exclude name="Squiz.Commenting.FunctionComment.MissingParamTag" />
    </rule>

    <!-- ## Squiz.Commenting.FunctionCommentThrowTag -->
    <!-- Verifies that a @throws tag exists for each exception type a function throws -->
    <!--    * Missing: Missing @throws tag in function comment -->
    <!--    * WrongNumber: Expected %s @throws tag(s) in function comment; %s found -->
    <!--<rule ref="Squiz.Commenting.FunctionCommentThrowTag" />-->

    <!-- ## Squiz.Commenting.InlineComment -->
    <!-- Checks that there is adequate spacing between comments -->
    <!--    * DocBlock: Inline doc block comments are not allowed; use "/* Comment */" or "// Comment" instead -->
    <!--    * WrongStyle: Perl-style comments are not allowed; use "// Comment" instead -->
    <!--    * TabBefore: Tab found before comment text; expected "// %s" but found "%s" -->
    <!--    * NoSpaceBefore: No space found before comment text; expected "// %s" but found "%s" -->
    <!--    * SpacingBefore: Expected 1 space before comment text but found %s; use block comment if you need indentation -->
    <!--    * Empty: Blank comments are not allowed -->
    <!--    * NotCapital: Inline comments must start with a capital letter -->
    <!--    * InvalidEndChar: Inline comments must end in %s -->
    <!--    * SpacingAfter: There must be no blank line following an inline comment -->
    <rule ref="Squiz.Commenting.InlineComment.WrongStyle" />
    <rule ref="Squiz.Commenting.InlineComment.TabBefore" />
    <rule ref="Squiz.Commenting.InlineComment.Empty" />

    <!-- ## Squiz.Commenting.LongConditionClosingComment -->
    <!-- Ensures long conditions have a comment at the end -->
    <!--    * Missing: End comment for long condition not found; expected "%s" -->
    <!--    * SpacingBefore: Space found before closing comment; expected "%s" -->
    <!--    * Invalid: Incorrect closing comment; expected "%s" but found "%s" -->

    <!-- ## Squiz.Commenting.PostStatementComment -->
    <!-- Checks to ensure that there are no comments after statements -->
    <!--    * Found: Comments may not appear after statements -->

    <!-- ## Squiz.Commenting.VariableComment -->
    <!-- Parses and verifies the variable doc comment -->
    <!--    * Missing: Missing member variable doc comment -->
    <!--    * WrongStyle: You must use "/**" style comments for a member variable comment -->
    <!--    * DuplicateVar: Only one @var tag is allowed in a member variable comment -->
    <!--    * EmptySees: Content missing for @see tag in member variable comment -->
    <!--    * TagNotAllowed: %s tag is not allowed in member variable comment -->
    <!--    * MissingVar: Missing @var tag in member variable comment -->
    <!--    * VarOrder: The @var tag must be the first tag in a member variable comment -->
    <!--    * EmptyVar: Content missing for @var tag in member variable comment -->
    <!--    * IncorrectVarType: Expected "%s" but found "%s" for @var tag in member variable comment -->


    <!-- # Squiz.ControlStructures -->

    <!-- ## Squiz.ControlStructures.ControlSignature -->
    <!-- Verifies that control statements conform to their coding standards -->
    <!--    * SpaceAfterKeyword: Expected 1 space after %s keyword; %s found -->
    <!--    * SpaceAfterCloseParenthesis: Expected 1 space after closing parenthesis; found %s -->
    <!--    * NewlineAfterOpenBrace: Newline required after opening brace -->
    <!--    * SpaceBeforeSemicolon: Expected 0 spaces before semicolon; %s found -->
    <!--    * SpaceAfterCloseBrace: Expected 1 space after closing brace; %s found -->
    <rule ref="Squiz.ControlStructures.ControlSignature" />

    <!-- ## Squiz.ControlStructures.ElseIfDeclaration -->
    <!-- Ensures the use of else if over elseif -->
    <!--    * NotAllowed: Usage of ELSEIF not allowed; use ELSE IF instead -->
    <!-- 有争议，所以去掉该规则。但建议新项目启动时就启用 -->

    <!-- ## Squiz.ControlStructures.ForEachLoopDeclaration -->
    <!-- Verifies that there is a space between each condition of foreach loops -->
    <!--    * MissingOpenParenthesis: Possible parse error: FOREACH has no opening parenthesis -->
    <!--    * MissingCloseParenthesis: Possible parse error: FOREACH has no closing parenthesis -->
    <!--    * SpaceAfterOpen: Space found after opening bracket of FOREACH loop -->
    <!--    * SpacingAfterOpen: Expected %s spaces after opening bracket; %s found -->
    <!--    * SpaceBeforeClose: Space found before closing bracket of FOREACH loop | Expected %s spaces before closing bracket; %s found -->
    <!--    * MissingAs: Possible parse error: FOREACH has no AS statement -->
    <!--    * AsNotLower: AS keyword must be lowercase; expected "%s" but found "%s" -->
    <!--    * NoSpaceBeforeArrow: Expected 1 space before "=>"; 0 found -->
    <!--    * SpacingBeforeArrow: Expected 1 space before "=>"; %s found -->
    <!--    * NoSpaceAfterArrow: Expected 1 space after "=>"; 0 found -->
    <!--    * SpacingAfterArrow: Expected 1 space after "=>"; %s found -->
    <!--    * NoSpaceBeforeAs: Expected 1 space before "as"; 0 found -->
    <!--    * SpacingBeforeAs: Expected 1 space before "as"; %s found -->
    <!--    * NoSpaceAfterAs: Expected 1 space after "as"; 0 found -->
    <!--    * SpacingAfterAs: Expected 1 space after "as"; %s found -->
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration" />

    <!-- ## Squiz.ControlStructures.ForLoopDeclaration -->
    <!-- Verifies that there is a space between each condition of for loops -->
    <!--    * NoOpenBracket: Possible parse error: no opening parenthesis for FOR keyword -->
    <!--    * SpacingAfterOpen: Space found after opening bracket of FOR loop -->
    <!--    * SpacingAfterOpen: Expected %s spaces after opening bracket; %s found -->
    <!--    * SpacingBeforeClose: Space found before closing bracket of FOR loop | Expected %s spaces before closing bracket; %s found -->
    <!--    * SpacingBeforeFirst: Space found before first semicolon of FOR loop -->
    <!--    * NoSpaceAfterFirst: Expected 1 space after first semicolon of FOR loop; 0 found -->
    <!--    * SpacingAfterFirst: Expected 1 space after first semicolon of FOR loop; %s found -->
    <!--    * SpacingBeforeSecond: Space found before second semicolon of FOR loop -->
    <!--    * NoSpaceAfterSecond: Expected 1 space after second semicolon of FOR loop; 0 found -->
    <!--    * SpacingAfterSecondNoThird:Expected no space after second semicolon of FOR loop; %s found  -->
    <!--    * SpacingAfterSecond: Expected 1 space after second semicolon of FOR loop; %s found -->
    <rule ref="Squiz.ControlStructures.ForLoopDeclaration" />

    <!-- ## Squiz.ControlStructures.InlineIfDeclaration -->
    <!-- Tests the spacing of shorthand IF statements -->
    <!--    * NotSingleLine: Inline shorthand IF statement must be declared on a single line -->
    <!--    * NoBrackets: Inline shorthand IF statement requires brackets around comparison -->
    <!--    * SpacingBeforeThen: Inline shorthand IF statement requires 1 space before THEN; %s found -->
    <!--    * ElvisSpacing: Inline shorthand IF statement without THEN statement requires 0 spaces between THEN and ELSE -->
    <!--    * SpacingAfterThen: Inline shorthand IF statement requires 1 space after THEN; %s found -->
    <!--    * SpacingBeforeElse: Inline shorthand IF statement requires 1 space before ELSE; %s found -->
    <!--    * SpacingAfterElse: Inline shorthand IF statement requires 1 space after ELSE; %s found -->
    <rule ref="Squiz.ControlStructures.InlineIfDeclaration">
        <exclude name="Squiz.ControlStructures.InlineIfDeclaration.NotSingleLine" />
        <exclude name="Squiz.ControlStructures.InlineIfDeclaration.NoBrackets" />
        <exclude name="Squiz.ControlStructures.InlineIfDeclaration.SpacingBeforeThen" />
    </rule>

    <!-- ## Squiz.ControlStructures.LowercaseDeclaration -->
    <!-- Ensures all control structure keywords are lowercase -->
    <!--    * FoundUppercase: %s keyword must be lowercase; expected "%s" but found "%s" -->
    <rule ref="Squiz.ControlStructures.LowercaseDeclaration" />

    <!-- ## Squiz.ControlStructures.SwitchDeclaration -->
    <!-- Enforces switch statement formatting -->
    <!--    * {$type}NotLower: $type keyword must be lowercase; expected "%s" but found "%s" -->
    <!--    * {$type}Indent: $type keyword must be indented $this->indent spaces from SWITCH keyword -->
    <!--    * SpacingAfterCase: CASE keyword must be followed by a single space -->
    <!--    * MissingColon: Possible parse error: CASE missing opening colon -->
    <!--    * SpaceBeforeColon: There must be no space before the colon in a $type statement -->
    <!--    * BreakIndent: Case breaking statement must be indented $this->indent spaces from SWITCH keyword -->
    <!--    * SpacingBeforeBreak: Blank lines are not allowed before case breaking statements -->
    <!--    * SpacingAfterBreak: Case breaking statements must be followed by a single blank line -->
    <!--    * SpacingAfterDefaultBreak: Blank lines are not allowed after the DEFAULT case\'s breaking statement -->
    <!--    * SpacingAfter{$type}: Blank lines are not allowed after $type statements -->
    <!--    * EmptyCase: Empty CASE statements are not allowed -->
    <!--    * EmptyDefault: Comment required for empty DEFAULT case -->
    <!--    * DefaultNoBreak: DEFAULT case must have a breaking statement -->
    <!--    * MissingDefault: All SWITCH statements must contain a DEFAULT case -->
    <!--    * CloseBraceAlign: Closing brace of SWITCH statement must be aligned with SWITCH keyword -->
    <!--    * MissingCase: SWITCH statements must contain at least one CASE statement -->
    <rule ref="Squiz.ControlStructures.SwitchDeclaration">
        <exclude name="Squiz.ControlStructures.SwitchDeclaration.SpacingAfterCase" />
        <exclude name="Squiz.ControlStructures.SwitchDeclaration.DefaultNoBreak" />
        <exclude name="Squiz.ControlStructures.SwitchDeclaration.MissingDefault" />
        <exclude name="Squiz.ControlStructures.SwitchDeclaration.BreakIndent" />
        <exclude name="Squiz.ControlStructures.SwitchDeclaration.SpacingBeforeBreak" />
        <exclude name="Squiz.ControlStructures.SwitchDeclaration.EmptyCase" />
        <exclude name="Squiz.ControlStructures.SwitchDeclaration.EmptyDefault" />
    </rule>


    <!-- # Squiz.CSS -->
    <!-- Skip details -->

    <!-- ## Squiz.CSS.ClassDefinitionClosingBraceSpace -->
    <!-- Ensure there is a single blank line after the closing brace of a class definition -->

    <!-- ## Squiz.CSS.ClassDefinitionNameSpacing -->
    <!-- Ensure there are no blank lines between the names of classes/IDs -->

    <!-- ## Squiz.CSS.ClassDefinitionOpeningBraceSpace -->
    <!-- Ensure a single space before, and a newline after, the class opening brace -->

    <!-- ## Squiz.CSS.ColonSpacing -->
    <!-- Ensure there is no space before a colon and one space after it -->

    <!-- ## Squiz.CSS.ColourDefinition -->
    <!-- Ensure colours are defined in upper-case and use shortcuts where possible -->

    <!-- ## Squiz.CSS.DisallowMultipleStyleDefinitions -->
    <!-- Ensure that each style definition is on a line by itself -->

    <!-- ## Squiz.CSS.DuplicateClassDefinition -->
    <!-- Check for duplicate class definitions that can be merged into one -->

    <!-- ## Squiz.CSS.DuplicateStyleDefinition -->
    <!-- Check for duplicate style definitions in the same class -->

    <!-- ## Squiz.CSS.EmptyClassDefinition -->
    <!-- Ensure that class definitions are not empty -->

    <!-- ## Squiz.CSS.EmptyStyleDefinition -->
    <!-- Ensure that style definitions are not empty -->

    <!-- ## Squiz.CSS.ForbiddenStyles -->
    <!-- Bans the use of some styles, such as deprecated or browser-specific styles -->

    <!-- ## Squiz.CSS.Indentation -->
    <!-- Ensures styles are indented 4 spaces -->

    <!-- ## Squiz.CSS.LowercaseStyleDefinition -->
    <!-- Ensure that all style definitions are in lowercase -->

    <!-- ## Squiz.CSS.MissingColon -->
    <!-- Ensure that all style definitions have a colon -->

    <!-- ## Squiz.CSS.NamedColours -->
    <!-- Ensure colour names are not used -->

    <!-- ## Squiz.CSS.Opacity -->
    <!-- Ensure that opacity values start with a 0 if it is not a whole number -->

    <!-- ## Squiz.CSS.SemicolonSpacing -->
    <!-- Ensure each style definition has a semi-colon and it is spaced correctly -->

    <!-- ## Squiz.CSS.ShorthandSize -->
    <!-- Ensure sizes are defined using shorthand notation where possible -->


    <!-- # Squiz.Debug -->
    <!-- Skip details -->

    <!-- ## Squiz.Debug.JSLint -->
    <!-- Runs jslint.js on the file -->
    <!--    * ExternalTool: … -->

    <!-- ## Squiz.Debug.JavaScriptLint -->
    <!-- Runs JavaScript Lint on the file -->
    <!--    * ExternalTool: jslint says: … -->


    <!-- # Squiz.Files -->

    <!-- ## Squiz.Files.FileExtension -->
    <!-- Tests that classes and interfaces are not declared in .php files -->
    <!--    * ClassFound: %s found in ".php" file; use ".inc" extension instead -->
    <!--    * NoClass: No interface or class found in ".inc" file; use ".php" extension instead -->


    <!-- # Squiz.Formatting -->

    <!-- ## Squiz.Formatting.OperatorBracket -->
    <!-- Tests that all arithmetic operations are bracketed -->
    <!--    * SpacingAfterMinus: No space allowed between minus sign and number -->
    <!--    * MissingBrackets: Arithmetic operation must be bracketed -->
    <rule ref="Squiz.Formatting.OperatorBracket.SpacingAfterMinus" />


    <!-- # Squiz.Functions -->

    <!-- ## Squiz.Functions.FunctionDeclarationArgumentSpacing -->
    <!-- Checks that arguments in function declarations are spaced correctly -->
    <!--    * SpaceBeforeEquals: Incorrect spacing between argument "%s" and equals sign; expected $this->equalsSpacing but found %s -->
    <!--    * SpaceAfterDefault: Incorrect spacing between default value and equals sign for argument "%s"; expected $this->equalsSpacing but found %s -->
    <!--    * SpaceBeforeComma: Expected 0 spaces between argument "%s" and comma; %s found -->
    <!--    * SpacingAfterHint: Expected 1 space between type hint and argument "%s"; %s found -->
    <!--    * NoSpaceBeforeHint: Expected 1 space between comma and type hint "%s"; 0 found -->
    <!--    * SpacingBeforeHint: Expected 1 space between comma and type hint "%s"; %s found -->
    <!--    * NoSpaceBeforeArg: Expected 1 space between comma and argument "%s"; 0 found -->
    <!--    * SpacingBeforeArg: Expected 1 space between comma and argument "%s"; %s found -->
    <!--    * SpacingAfterHint: Expected 1 space between type hint and argument "%s"; %s found -->
    <!--    * SpacingAfterOpenHint: Expected %s spaces between opening bracket and type hint "%s"; %s found -->
    <!--    * SpacingAfterOpen: Expected %s spaces between opening bracket and argument "%s"; %s found -->
    <!--    * SpacingBetween: Expected 0 spaces between brackets of function declaration; %s found -->
    <!--    * SpacingBeforeClose: Expected %s spaces between argument "%s" and closing bracket; %s found -->
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
        <exclude name="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpaceBeforeEquals" />
        <exclude name="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpaceAfterDefault" />
    </rule>

    <!-- ## Squiz.Functions.FunctionDeclaration -->
    <!-- Checks the function declaration is correct -->
    <!--    Patterns:                       -->
    <!--    * 'function abc(...);'          -->
    <!--    * 'function abc(...)'           -->
    <!--    * 'abstract function abc(...);' -->
    <rule ref="Squiz.Functions.FunctionDeclaration" />

    <!-- ## Squiz.Functions.FunctionDuplicateArgument -->
    <!-- Checks that duplicate arguments are not used in function declarations -->
    <!--    * Found: Variable "%s" appears more than once in function declaration -->
    <rule ref="Squiz.Functions.FunctionDuplicateArgument" />

    <!-- ## Squiz.Functions.GlobalFunction -->
    <!-- Tests for functions outside of classes -->
    <!--    * Found: Consider putting global function "%s" in a static class -->
    <rule ref="Squiz.Functions.GlobalFunction" />

    <!-- ## Squiz.Functions.LowercaseFunctionKeywords -->
    <!-- Ensures all function keywords are lowercase -->
    <!--    * FoundUppercase: %s keyword must be lowercase; expected "%s" but found "%s" -->
    <rule ref="Squiz.Functions.LowercaseFunctionKeywords" />

    <!-- ## Squiz.Functions.MultiLineFunctionDeclaration -->
    <!-- Ensure single and multi-line function declarations are defined correctly -->
    <!--    * {$errorPrefix}FirstParamSpacing: The first parameter of a multi-line $type declaration must be on the line after the opening bracket -->
    <!--    * {$errorPrefix}OneParamPerLine: Multi-line $type declarations must define one parameter per line -->
    <rule ref="Squiz.Functions.MultiLineFunctionDeclaration" />


    <!-- # Squiz.NamingConventions -->

    <!-- ## Squiz.NamingConventions.ValidFunctionName -->
    <!-- Ensures method names are correct -->
    <!--    * DoubleUnderscore: Function name "%s" is invalid; only PHP magic methods should be prefixed with a double underscore -->
    <!--    * NotCamelCaps: Function name "%s" is not in camel caps format -->
    <!-- 注意：其它标准有类似的 PEAR.NamingConventions.ValidFunctionName（本标准包含该标准），此处不再重复设置 -->

    <!-- ## Squiz.NamingConventions.ValidVariableName -->
    <!-- Checks the naming of variables and member variables -->
    <!--    * NotCamelCaps: Variable "%s" is not in valid camel caps format -->
    <!--    * PublicHasUnderscore: %s member variable "%s" must not contain a leading underscore -->
    <!--    * PrivateNoUnderscore: Private member variable "%s" must contain a leading underscore -->
    <!--    * MemberNotCamelCaps: Member variable "%s" is not in valid camel caps format -->
    <!--    * StringNotCamelCaps: Variable "%s" is not in valid camel caps format -->
    <!-- 注意：其它标准有类似的 Zend.NamingConventions.ValidVariableName，此处不再重复设置 -->


    <!-- # Squiz.Objects -->

    <!-- ## Squiz.Objects.DisallowObjectStringIndex -->
    <!-- Ensures that object indexes are written in dot notation -->
    <!--    * Found: Object indexes must be written in dot notation -->
    <rule ref="Squiz.Objects.DisallowObjectStringIndex" />

    <!-- ## Squiz.Objects.ObjectInstantiation -->
    <!-- Ensures objects are assigned to a variable when instantiated -->
    <!--    * NotAssigned: New objects must be assigned to a variable -->

    <!-- ## Squiz.Objects.ObjectMemberComma -->
    <!-- Ensures the last member of an object is not followed by a comma -->
    <!--    * Missing: Last member of object must not be followed by a comma -->
    <rule ref="Squiz.Objects.ObjectMemberComma" />


    <!-- # Squiz.Operators -->

    <!-- ## Squiz.Operators.ComparisonOperatorUsage -->
    <!-- A Sniff to enforce the use of IDENTICAL type operators rather than EQUAL operators -->
    <!--    * NotAllowed: Operator %s prohibited; use %s instead -->
    <!--    * ImplicitTrue: Implicit true comparisons prohibited; use === TRUE instead -->

    <!-- ## Squiz.Operators.IncrementDecrementUsage -->
    <!-- Ensures that the ++ operators are used when possible -->
    <!--    * NotAllowed: Increment and decrement operators cannot be used in an arithmetic operation -->
    <!--    * NoBrackets: Increment and decrement operators must be bracketed when used in string concatenation -->
    <!--    * Found: Increment|Decrement operators should be used where possible; found \"$found\" but expected \"$expected\" -->
    <rule ref="Squiz.Operators.IncrementDecrementUsage">
        <exclude name="Squiz.Operators.IncrementDecrementUsage.NoBrackets" />
    </rule>

    <!-- ## Squiz.Operators.ValidLogicalOperators -->
    <!-- Ensures logical operators 'and' and 'or' are not used -->
    <!--    * NotAllowed: Logical operator "%s" is prohibited; use "%s" instead -->
    <rule ref="Squiz.Operators.ValidLogicalOperators" />


    <!-- # Squiz.PHP -->

    <!-- ## Squiz.PHP.CommentedOutCode -->
    <!-- Warn about commented out code -->
    <!--    * Found: This comment is %s%% valid code; is this commented out code? -->

    <!-- ## Squiz.PHP.DisallowBooleanStatement -->
    <!-- Ensures that boolean operators are only used inside control structure conditions -->
    <!--    * Found: Boolean operators are not allowed outside of control structure conditions -->

    <!-- ## Squiz.PHP.DisallowComparisonAssignment -->
    <!-- Ensures that the value of a comparison is not assigned to a variable -->
    <!--    * AssignedComparison: The value of a comparison must not be assigned to a variable -->
    <!--    * AssignedBool: The value of a boolean operation must not be assigned to a variable -->

    <!-- ## Squiz.PHP.DisallowInlineIf -->
    <!-- Stops inline IF statements from being used -->
    <!--    * Found: Inline IF statements are not allowed -->

    <!-- ## Squiz.PHP.DisallowMultipleAssignments -->
    <!-- Ensures there is only one assignment on a line, and that it is the first thing on the line -->
    <!--    * Found: Assignments must be the first block of code on a line -->

    <!-- ## Squiz.PHP.DisallowObEndFlush -->
    <!-- Checks the indenting used when an ob_start() call occurs -->
    <!--    * Found: Use of ob_end_flush() is not allowed; use ob_get_contents() and ob_end_clean() instead -->

    <!-- ## Squiz.PHP.DisallowSizeFunctionsInLoops -->
    <!-- Bans the use of size-based functions in loop conditions -->
    <!--    * Found: The use of %s inside a loop condition is not allowed; assign the return value to a variable and use the variable in the loop condition instead -->

    <!-- ## Squiz.PHP.DiscouragedFunctions -->
    <!-- Discourages the use of debug functions -->
    <!--    Forbidden functions: error_log, print_r, var_dump -->
    <rule ref="Squiz.PHP.DiscouragedFunctions" />

    <!-- ## Squiz.PHP.EmbeddedPhp -->
    <!-- Checks the indentation of embedded PHP code segments -->
    <!--    * Empty: Empty embedded PHP tag found -->
    <!--    * ContentAfterOpen: Opening PHP tag must be on a line by itself -->
    <!--    * SpacingBefore: Blank line found at start of embedded PHP content -->
    <!--    * Indent: First line of embedded PHP code must be indented %s spaces; %s found -->
    <!--    * ContentBeforeOpen: Opening PHP tag must be on a line by itself -->
    <!--    * OpenTagIndent: Opening PHP tag indent incorrect; expected no more than %s spaces but found %s -->
    <!--    * ContentBeforeEnd: Closing PHP tag must be on a line by itself -->
    <!--    * ContentAfterEnd: Closing PHP tag must be on a line by itself -->
    <!--    * SpacingAfter: Blank line found at end of embedded PHP content -->
    <!--    * Empty: Empty embedded PHP tag found -->
    <!--    * SpacingAfterOpen: Expected 1 space after opening PHP tag; %s found -->
    <!--    * NoSemicolon: Inline PHP statement must end with a semicolon -->
    <!--    * MultipleStatements: Inline PHP statement must contain a single statement; %s found -->
    <!--    * SpacingBeforeClose: Expected 1 space before closing PHP tag; %s found -->
    <rule ref="Squiz.PHP.EmbeddedPhp" />

    <!-- ## Squiz.PHP.Eval -->
    <!-- The use of eval() is discouraged -->
    <!--    * Discouraged: Use of eval() is discouraged -->
    <rule ref="Squiz.PHP.Eval" />

    <!-- ## Squiz.PHP.ForbiddenFunctions -->
    <!-- Discourages the use of alias functions -->
    <!--    Forbidden functions -> Replaced functions   -->
    <!--    * sizeof            -> count                -->
    <!--    * delete            -> unset                -->
    <!--    * print             -> echo                 -->
    <!--    * is_null           ->                      -->
    <!--    * create_function   ->                      -->

    <!-- ## Squiz.PHP.GlobalKeyword -->
    <!-- Stops the usage of the "global" keyword -->
    <!--    * NotAllowed: Use of the "global" keyword is forbidden; use "$GLOBALS[\'%s\']" instead -->
    <rule ref="Squiz.PHP.GlobalKeyword" />

    <!-- ## Squiz.PHP.Heredoc -->
    <!-- Bans the use of heredocs and nowdocs -->
    <!--    * NotAllowed: Use of heredoc and nowdoc syntax ("<<<") is not allowed; use standard strings or inline HTML instead -->

    <!-- ## Squiz.PHP.InnerFunctions -->
    <!-- Ensures that functions within functions are never used -->
    <!--    * NotAllowed: The use of inner functions is forbidden -->
    <rule ref="Squiz.PHP.InnerFunctions" />

    <!-- ## Squiz.PHP.LowercasePHPFunctions -->
    <!-- Ensures all calls to inbuilt PHP functions are lowercase -->
    <!--    * CallUppercase: Calls to inbuilt PHP functions must be lowercase; expected "%s" but found "%s" -->
    <rule ref="Squiz.PHP.LowercasePHPFunctions" />

    <!-- ## Squiz.PHP.NonExecutableCode -->
    <!-- Warns about code that can never been executed -->
    <!--    * ReturnNotRequired: Empty return statement not required here -->
    <!--    * Unreachable: Code after %s statement cannot be executed -->
    <rule ref="Squiz.PHP.NonExecutableCode" />


    <!-- # Squiz.Scope -->

    <!-- ## Squiz.Scope.MemberVarScope -->
    <!-- Verifies that class members have scope modifiers -->
    <!--    * Missing: Scope modifier not specified for member variable "%s" -->
    <rule ref="Squiz.Scope.MemberVarScope" />

    <!-- ## Squiz.Scope.MethodScope -->
    <!-- Verifies that class methods have scope modifiers -->
    <!--    * Missing: Visibility must be declared on method "%s" -->
    <rule ref="Squiz.Scope.MethodScope" />

    <!-- ## Squiz.Scope.StaticThisUsage -->
    <!-- Checks for usage of $this in static methods, which will cause runtime errors -->
    <!--    * Found: Usage of "$this" in static methods will cause runtime errors -->
    <rule ref="Squiz.Scope.StaticThisUsage" />


    <!-- # Squiz.Strings -->

    <!-- ## Squiz.Strings.ConcatenationSpacing -->
    <!-- Makes sure there are no spaces around the concatenation operator -->
    <!--    * PaddingFound: Concat operator must not be surrounded by %s|(a single) spaces -->

    <!-- ## Squiz.Strings.DoubleQuoteUsage -->
    <!-- Makes sure that any use of double quotes strings are warranted -->
    <!--    * ContainsVar: Variable "%s" not allowed in double quoted string; use concatenation instead -->
    <!--    * NotRequired: String %s does not require double quotes; use single quotes instead -->
    <rule ref="Squiz.Strings.DoubleQuoteUsage.NotRequired" />

    <!-- ## Squiz.Strings.EchoedStrings -->
    <!-- Makes sure that any strings that are "echoed" are not enclosed in brackets -->
    <!--    * HasBracket: Echoed strings should not be bracketed -->
    <rule ref="Squiz.Strings.EchoedStrings" />


    <!-- # Squiz.WhiteSpace -->

    <!-- ## Squiz.WhiteSpace.CastSpacing -->
    <!-- Ensure cast statements don't contain whitespace -->
    <!--    * ContainsWhiteSpace: Cast statements must not contain whitespace; expected "%s" but found "%s" -->
    <rule ref="Squiz.WhiteSpace.CastSpacing" />

    <!-- ## Squiz.WhiteSpace.ControlStructureSpacing -->
    <!-- Checks that control structures have the correct spacing around brackets -->
    <!--    * SpacingAfterOpenBrace: Expected 0 spaces after opening bracket; %s found -->
    <!--    * SpaceBeforeCloseBrace: Expected 0 spaces before closing bracket; %s found -->
    <!--    * SpacingAfterOpen: Blank line found at start of control structure -->
    <!--    * SpacingBeforeClose: Blank line found at end of control structure -->
    <!--    * LineAfterClose: Blank line found after control structure -->
    <!--    * NoLineAfterClose: No blank line found after control structure -->
    <rule ref="Squiz.WhiteSpace.ControlStructureSpacing" />

    <!-- ## Squiz.WhiteSpace.FunctionClosingBraceSpace -->
    <!-- Checks that there is one empty line before the closing brace of a function -->
    <!--    * SpacingBetween: The opening and closing braces of empty functions must be directly next to each other; e.g., function () {} -->
    <!--    * ContentBeforeClose: Expected 0 blank lines before closing brace of nested function; %s found -->
    <!--    * SpacingBeforeClose: Expected 1 blank line before closing function brace; %s found -->
    <rule ref="Squiz.WhiteSpace.FunctionClosingBraceSpace">
        <exclude name="Squiz.WhiteSpace.FunctionClosingBraceSpace.SpacingBeforeClose" />
    </rule>

    <!-- ## Squiz.WhiteSpace.FunctionOpeningBraceSpace -->
    <!-- Checks that there is no empty line after the opening brace of a function -->
    <!--    * SpacingAfter: Expected 0 blank lines after opening function brace; %s found -->
    <rule ref="Squiz.WhiteSpace.FunctionOpeningBraceSpace" />

    <!-- ## Squiz.WhiteSpace.FunctionSpacing -->
    <!-- Checks the separation between methods in a class or interface -->
    <!--    * After: Expected %s blank line(s) after function; %s found -->
    <!--    * Before: Expected %s blank line(s) before function; %s found -->

    <!-- ## Squiz.WhiteSpace.LanguageConstructSpacing -->
    <!-- Ensures all language constructs contain a single space between themselves and their content -->
    <!--    * IncorrectSingle: Language constructs must be followed by a single space; expected 1 space but found %s -->
    <!--    * Incorrect: Language constructs must be followed by a single space; expected "%s" but found "%s" -->
    <rule ref="Squiz.WhiteSpace.LanguageConstructSpacing" />

    <!-- ## Squiz.WhiteSpace.LogicalOperatorSpacing -->
    <!-- Verifies that operators have valid spacing surrounding them -->
    <!--    * NoSpaceBefore: Expected 1 space before logical operator; 0 found -->
    <!--    * TooMuchSpaceBefore: Expected 1 space before logical operator; %s found -->
    <!--    * NoSpaceAfter: Expected 1 space after logical operator; 0 found -->
    <!--    * TooMuchSpaceAfter: Expected 1 space after logical operator; %s found -->

    <!-- ## Squiz.WhiteSpace.MemberVarSpacing -->
    <!-- Verifies that class members are spaced correctly -->
    <!--    * AfterComment: Expected 0 blank lines after member var comment; %s found -->
    <!--    * FirstIncorrect: Expected %s blank line(s) before first member var; %s found -->
    <!--    * Incorrect: Expected %s blank line(s) before member var; %s found -->
    <rule ref="Squiz.WhiteSpace.MemberVarSpacing">
        <exclude name="Squiz.WhiteSpace.MemberVarSpacing.FirstIncorrect" />
    </rule>

    <!-- ## Squiz.WhiteSpace.ObjectOperatorSpacing -->
    <!-- Ensure there is no whitespace before/after an object operator -->
    <!--    * Before: Space found before object operator -->
    <!--    * After: Space found after object operator -->
    <rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing.After" />

    <!-- ## Squiz.WhiteSpace.OperatorSpacing -->
    <!-- Verifies that operators have valid spacing surrounding them -->
    <!--    * NoSpaceBeforeAmp: Expected 1 space before "&" operator; 0 found -->
    <!--    * SpacingBeforeAmp: Expected 1 space before "&" operator; %s found -->
    <!--    * NoSpaceAfterAmp: Expected 1 space after "&" operator; 0 found -->
    <!--    * SpacingAfterAmp: Expected 1 space after "&" operator; %s found -->
    <!--    * NoSpaceBefore: Expected 1 space before \"$operator\"; 0 found -->
    <!--    * SpacingBefore: Expected 1 space before "%s"; %s found -->
    <!--    * NoSpaceAfter: Expected 1 space after \"$operator\"; 0 found -->
    <!--    * SpacingAfter: Expected 1 space after "%s"; %s found -->
    <!--    * Before: There must be no space before the colon in a property/label declaration -->
    <!--    * After: There must be a single space after the colon in a property/label declaration -->
    <!--    * ContentBefore: Closing brace must be on a line by itself -->
    <!--    * Indent: Closing brace indented incorrectly; expected %s spaces, found %s -->
    <rule ref="Squiz.WhiteSpace.OperatorSpacing">
        <exclude name="Squiz.WhiteSpace.OperatorSpacing.SpacingBefore" />
    </rule>

    <!-- ## Squiz.WhiteSpace.PropertyLabelSpacing -->
    <!-- Ensures that a property or label colon has a single space after it and no space before it -->
    <!--    * Before: There must be no space before the colon in a property/label declaration -->
    <!--    * After: There must be a single space after the colon in a property/label declaration -->
    <rule ref="Squiz.WhiteSpace.PropertyLabelSpacing" />

    <!-- ## Squiz.WhiteSpace.ScopeClosingBrace -->
    <!-- Checks that the closing braces of scopes are aligned correctly -->
    <!--    * ContentBefore: Closing brace must be on a line by itself -->
    <!--    * Indent: Closing brace indented incorrectly; expected %s spaces, found %s -->
    <!-- 注意：其它标准有类似的 PEAR.WhiteSpace.ScopeClosingBrace ，此处不再重复设置 -->

    <!-- ## Squiz.WhiteSpace.ScopeKeywordSpacing -->
    <!-- Ensure there is a single space after scope keywords -->
    <!--    * Incorrect: Scope keyword "%s" must be followed by a single space -->
    <rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing" />

    <!-- ## Squiz.WhiteSpace.SemicolonSpacing -->
    <!-- Ensure there is no whitespace before a semicolon -->
    <!--    * Incorrect: Space found before semicolon; expected "%s" but found "%s" -->
    <rule ref="Squiz.WhiteSpace.SemicolonSpacing" />

    <!-- ## Squiz.WhiteSpace.SuperfluousWhitespace -->
    <!-- Checks for unneeded whitespace -->
    <!--    * StartFile: Additional whitespace found at start of file -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace" />



    <!-- ==== -->
    <!-- Zend -->
    <!-- ==== -->


    <!-- # Zend.Debug -->

    <!-- ## Zend.Debug.CodeAnalyzer -->
    <!-- Runs the Zend Code Analyzer (from Zend Studio) on the file -->
    <!--    * ExternalTool: … -->
    <!--    Notice: Require Zend Code Analyzer (from Zend Studio), so I skip it. -->


    <!-- # Zend.Files -->

    <!-- ## Zend.Files.ClosingTag -->
    <!-- Checks that the file does not end with a closing tag -->
    <!--    * NotAllowed: A closing tag is not permitted at the end of a PHP file -->
    <!-- 注意：有相同的标准 PSR2.Files.ClosingTag ，此处不再重复设置 -->


    <!-- # Zend.NamingConventions -->

    <!-- ## Zend.NamingConventions.ValidVariableName -->
    <!-- Checks the naming of variables and member variables -->
    <!--    * NotCamelCaps: Variable "%s" is not in valid camel caps format -->
    <!--    * ContainsNumbers: Variable "%s" contains numbers but this is discouraged -->
    <!--    * PublicHasUnderscore: Public member variable "%s" must not contain a leading underscore -->
    <!--    * PrivateNoUnderscore: %s member variable "%s" must contain a leading underscore -->
    <!--    * MemberVarNotCamelCaps: Member variable "%s" is not in valid camel caps format -->
    <!--    * MemberVarContainsNumbers: Member variable "%s" contains numbers but this is discouraged -->
    <!--    * StringVarNotCamelCaps: Variable "%s" is not in valid camel caps format -->
    <!--    * StringVarContainsNumbers: Variable "%s" contains numbers but this is discouraged -->
    <rule ref="Zend.NamingConventions.ValidVariableName.NotCamelCaps" />
    <rule ref="Zend.NamingConventions.ValidVariableName.PublicHasUnderscore" />
    <rule ref="Zend.NamingConventions.ValidVariableName.MemberVarNotCamelCaps" />
    <rule ref="Zend.NamingConventions.ValidVariableName.StringVarNotCamelCaps" />
    <!-- 注意：其它标准有类似的 NamingConventions，此处不再重复设置，参见 Squiz -->

</ruleset>
